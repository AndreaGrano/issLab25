/* Generated by AN DISI Unibo */ 
package it.unibo.sonar24

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonar24 ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 val LIMIT = 100  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delegate("sonarstart", "sonardevice") 
						delegate("sonarstop", "sonardevice") 
						CommUtils.outmagenta("$name delegated sonarstart and sonarstop commands to sonardevice")
						subscribeToLocalActor("datacleaner") 
						CommUtils.outmagenta("$name subscribed to datacleaner for sonardata")
						connectToMqttBroker( "tcp://192.168.0.9:1883" )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name waiting for sonardata...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="pub",cond=whenEvent("sonardata"))
				}	 
				state("pub") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								//val m = MsgUtil.buildEvent(name, "sonardata", "distance(payloadArg(0))" ) 
								publish(MsgUtil.buildEvent(name,"sonardata","distance(payloadArg(0))").toString(), "sonardata" )   
								CommUtils.outmagenta("$name published the value: ${payloadArg(0)}")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
