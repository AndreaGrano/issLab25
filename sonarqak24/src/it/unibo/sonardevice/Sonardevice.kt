/* Generated by AN DISI Unibo */ 
package it.unibo.sonardevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import java.io.*

class Sonardevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				lateinit var p : Process
				lateinit var reader : BufferedReader 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						CommUtils.outblue("$name waiting for command...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="sonarStart",cond=whenDispatch("sonarstart"))
				}	 
				state("sonarStart") { //this:State
					action { //it:State
						CommUtils.outblue("$name: sonarstart received")
						
									try {
										p = Runtime.getRuntime().exec("python sonar.py")
										reader = BufferedReader(InputStreamReader(p.getInputStream()))
									} catch(e : Exception) {
										println("sonardevice sonarStart ERROR: $e")
									}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendSonarData", cond=doswitch() )
				}	 
				state("sendSonarData") { //this:State
					action { //it:State
						
									try {
										var V = reader.readLine()
										if(V != null) {
											val payload = "distance( ${V} )"
											val event = MsgUtil.buildEvent("sonardevice", "sonardata", payload)
											
											emitLocalStreamEvent(event)
										}
									} catch(e : Exception) {
										println("sonardevice sendSonarData ERROR: $e")
									}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="sonarStop",cond=whenDispatch("sonarstop"))
				}	 
				state("sonarStop") { //this:State
					action { //it:State
						CommUtils.outblue("$name: sonarstop received")
						
									reader.close()
									p.destroy()
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
} 
