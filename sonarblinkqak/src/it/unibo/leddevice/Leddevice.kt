/* Generated by AN DISI Unibo */ 
package it.unibo.leddevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Leddevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 lateinit var p : Process  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 p = machineExec("python ledPython25Off.py")  
						CommUtils.outmagenta("$name: led reset")
						subscribeToLocalActor("mastermind") 
						CommUtils.outmagenta("$name: subscribed to mastermind for ledcmd")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="elabCmd",cond=whenEvent("ledcmd"))
				}	 
				state("elabCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("state(S)"), Term.createTerm("state(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val S = payloadArg(0)  
								if(  S == "on"  
								 ){
													if(p.isAlive()) {
														p.destroy()
													}
													p = machineExec("python ledPython25On.py")
								CommUtils.outmagenta("$name: led is now on")
								}
								if(  S == "off"  
								 ){
													if(p.isAlive()) {
														p.destroy()
													}
													p = machineExec("python ledPython25Off.py")
								CommUtils.outmagenta("$name: led is now off")
								}
								if(  S == "blink"  
								 ){ 
													if(!p.isAlive()) {
														p = Runtime.getRuntime().exec("python ledb25link.py")
													}
								CommUtils.outmagenta("$name: led is now blinking")
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
} 
