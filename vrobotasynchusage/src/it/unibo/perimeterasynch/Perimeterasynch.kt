/* Generated by AN DISI Unibo */ 
package it.unibo.perimeterasynch

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Perimeterasynch ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val vr = VrobotHLMoves24.create("localhost",myself)
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name: starting...")
						
									vr.setTrace(true)
									vr.move("h") //per sbloccare eventuali notallowed
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveforward", cond=doswitch() )
				}	 
				state("moveforward") { //this:State
					action { //it:State
						delay(200) 
						 vr.move("f")  
						CommUtils.outred("$name: move(f)")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="moveforward",cond=whenReply("stepdone"))
					transition(edgeName="t01",targetState="turnleft",cond=whenReply("stepfailed"))
					transition(edgeName="t02",targetState="handlesonardata",cond=whenEvent("sonardata"))
				}	 
				state("turnleft") { //this:State
					action { //it:State
						 vr.move("l")  
						CommUtils.outred("$name: move(l)")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveforward", cond=doswitch() )
				}	 
				state("handlesonardata") { //this:State
					action { //it:State
						CommUtils.outred("$name: stopped and ignoring all messages from sonar for 2 sec")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handlesonardata", 
				 	 					  scope, context!!, "local_tout_"+name+"_handlesonardata", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t03",targetState="resume",cond=whenTimeout("local_tout_"+name+"_handlesonardata"))   
				}	 
				state("resume") { //this:State
					action { //it:State
						CommUtils.outred("$name: resume")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="moveforward",cond=whenReply("stepdone"))
					transition(edgeName="t05",targetState="turnleft",cond=whenReply("stepfailed"))
				}	 
			}
		}
} 
